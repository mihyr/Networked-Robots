#!/usr/bin/env python
from math import fabs
import rospy
import serial
from sensor_msgs.msg import NavSatFix,NavSatStatus
from std_msgs.msg import Header


freq = 80
portwrite = "/dev/ttyUSB2"
port = "/dev/ttyUSB1"
trigger = True

def main():
    #initialize node
    rospy.init_node('gps')

    #define ros frequency
    hz = rospy.Rate(freq)
    gps_publisher = rospy.Publisher("/gps", NavSatFix, queue_size=10)

    #rospy.logerr("This is just a check for check_latency node, ignore me")
    rospy.loginfo("Connecting Port..")
    
    try:
        serw = serial.Serial(portwrite, baudrate = 115200, timeout = 1,rtscts=True, dsrdtr=True)
        serw.write('AT+QGPS=1\r'.encode())
        serw.close()
        rospy.sleep(1)
        trigger = True

    except Exception as e: 
        rospy.logerr("Serial port connection failed.")
        print(e)
        trigger = False
    
    rospy.loginfo("Receiving GPS data\n")
    ser = serial.Serial(port, baudrate = 115200, timeout = 0.5,rtscts=True, dsrdtr=True)
    



    def parseGPS(data):
        print(data, end='') #prints raw data
        if data[0:6] == "$GPRMC":
            sdata = data.split(",")
            if sdata[2] == 'V':
                print("\nNo satellite data available.\n")
                return
            print("-----Parsing GPRMC-----")
            time = sdata[1][0:2] + ":" + sdata[1][2:4] + ":" + sdata[1][4:6]
            lat = decode(sdata[3]) #latitude
            dirLat = sdata[4]      #latitude direction N/S
            lon = decode(sdata[5]) #longitute
            dirLon = sdata[6]      #longitude direction E/W
            speed = sdata[7]       #Speed in knots
            trCourse = sdata[8]    #True course
            date = sdata[9][0:2] + "/" + sdata[9][2:4] + "/" + sdata[9][4:6] #date
            variation = sdata[10]  #variation
            #degreeChecksum = sdata[13] #Checksum
            #dc = degreeChecksum.split("*")
            #degree = dc[0]        #degree
            #checksum = dc[1]      #checksum

            latitude = lat.split() # parsing latitude
            longitute = lon.split() # parsing longitute
            lat_converted = float(int(latitude[0]) + (float(latitude[2])/60))
            lon_converted = float(int(longitute[0]) + (float(longitute[2])/60))
            
            print("\nLatitude: " + str(int(latitude[0]) + (float(latitude[2])/60)) + dirLat) 

            print("Longitute: " + str(int(longitute[0]) + (float(longitute[2])/60)) + dirLon)

            print(f"time : {time}, latitude : {lat}{dirLat}, longitude : {lon}{dirLon}, speed : {speed},True Course : {trCourse}, Date :{date}")
            #print(int(latitude[0]),(float(latitude[2])/60) )
            
            
            if dirLat == 'S':
                lat_converted = lat_converted*-1

            if dirLon == 'W':
                lon_converted = lon_converted*-1
            #print(lat_converted,lon_converted)
            return lat_converted,lon_converted
    
    def decode(coord):
        #Converts DDDMM.MMMMM -> DD deg MM.MMMMM min
        x = coord.split(".")
        head = x[0]
        tail = x[1]
        deg = head[0:-2]
        min = head[-2:]
        return deg + " deg " + min + "." + tail + " min"
    latitute = 0
    longitude = 0
    while not rospy.is_shutdown():
        try:
            data = ser.readline().decode('utf-8')
            #print(data)
            latitute, longitude = parseGPS(data)

        except:
            pass
        
        gps_data = NavSatFix()
        gps_data.header = Header()
        gps_data.header.stamp =  rospy.Time.now()
        gps_data.header.frame_id = "GPS"
        gps_data.status.status = NavSatStatus.STATUS_FIX
        gps_data.status.service = NavSatStatus.SERVICE_GPS

        gps_data.latitude = latitute
        gps_data.longitude = longitude
        gps_data.altitude = 0

        gps_data.position_covariance_type = NavSatFix.COVARIANCE_TYPE_DIAGONAL_KNOWN
        gps_publisher.publish(gps_data)

        rospy.sleep(2)
        #hz.sleep()


if __name__ == "__main__":
    try:
        main()
    except rospy.ROSInterruptException:
        pass 




