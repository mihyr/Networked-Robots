#!/usr/bin/env python
from __future__ import print_function
from sys import path

from autobahn.util import public
from yaml import scan
import rospy
import roslibpy
from rospy.client import get_param
from sensor_msgs.msg import Imu, JointState, LaserScan
from geometry_msgs.msg import TwistStamped, Twist, Vector3
from std_msgs.msg import Float64, Float32,  Header
from nav_msgs.msg import OccupancyGrid, Odometry, MapMetaData
from tf.msg import tfMessage
from tf2_msgs.msg import TFMessage
from rospy_message_converter.message_converter import convert_dictionary_to_ros_message as rd

bots = rospy.get_param('/robots')
get_imu = rospy.get_param('/listener/get_imu')
get_cmd_vel = rospy.get_param('/listener/get_cmd_vel')
get_joint_states = rospy.get_param('/listener/get_joint_states')
get_map = rospy.get_param('/listener/get_map')
get_map_metadata = rospy.get_param('/listener/get_map_metadata')
get_scan = rospy.get_param('/listener/get_scan')
get_odom = rospy.get_param('/listener/get_odom')
get_slam_entropy = rospy.get_param('/listener/get_slam_entropy')
get_tf = rospy.get_param('/listener/get_tf')
get_tf_static = rospy.get_param('/listener/get_tf_static')
freq = rospy.get_param("/listener/pub_frequency") 

bot1_ip = bots['robot1'][0]
bot1_port = bots['robot1'][1]
bot1_name = bots['robot1'][2]

bot2_ip = bots['robot2'][0]
bot2_port = bots['robot2'][1]
bot2_name = bots['robot2'][2]


def main():
    #initialize node
    rospy.init_node('server_listener')

    #define ros frequency
    hz = rospy.Rate(freq)
    
    client_1 = roslibpy.Ros(host=bot1_ip, port=bot1_port)
    client_2 = roslibpy.Ros(host=bot2_ip, port=bot2_port)
    client_1.run()
    client_2.run()

    if client_1.is_connected:
        client_1.on_ready(lambda: print(f'Connection established with {bot1_name} on ip:{bot1_ip} port:{bot1_port}'))

    else:
        rospy.logerr(f'{bot1_name} on ip:{bot1_ip} port:{bot1_port} is not connected')
    
    if client_2.is_connected:
        client_2.on_ready(lambda: print(f'Connection established with {bot2_name} on ip:{bot2_ip} port:{bot2_port}'))
        
    else:
        rospy.logerr(f'{bot2_name} on ip:{bot2_ip} port:{bot2_port} is not connected')

   
    '''
    #IMU
    '''
    if get_imu:
        imu_listener_1 = roslibpy.Topic(client_1, '/imu', 'sensor_msgs/Imu')
        imu_listener_2 = roslibpy.Topic(client_2, '/imu', 'sensor_msgs/Imu')

        imu_publisher_1 = rospy.Publisher(f"/{bot1_name}/imu", Imu, queue_size=10)
        imu_publisher_2 = rospy.Publisher(f"/{bot2_name}/imu", Imu, queue_size=10)

        def imu_callback_1(msg):
            imu_data_1 = rd('sensor_msgs/Imu', msg)
            imu_publisher_1.publish(imu_data_1)

        def imu_callback_2(msg):
            imu_data_2 = rd('sensor_msgs/Imu', msg)
            imu_publisher_2.publish(imu_data_2)
    
    '''
    #cmd_vel
    '''
    if get_cmd_vel:
        cmd_listener_1 = roslibpy.Topic(client_1, '/cmd_vel', 'geometry_msgs/Twist')
        cmd_listener_2 = roslibpy.Topic(client_2, '/cmd_vel', 'geometry_msgs/Twist')

        cmd_publisher_1 = rospy.Publisher(f"/{bot1_name}/cmd_vel", Twist, queue_size=10)
        cmd_publisher_2 = rospy.Publisher(f"/{bot2_name}/cmd_vel", Twist, queue_size=10)

        def cmd_callback_1(msg):
            #cmd_data_1 = Twist()
            #cmd_data_1.linear = Vector3(msg['linear']['x'],msg['linear']['y'],msg['linear']['z'])
            #md_data_1.angular = Vector3(msg['angular']['x'],msg['angular']['y'],msg['angular']['z'])
            cmd_data_1 = rd('geometry_msgs/Twist', msg)
            cmd_publisher_1.publish(cmd_data_1)

        def cmd_callback_2(msg):
            #cmd_data_2 = Twist()
            #cmd_data_2.linear = Vector3(msg['linear']['x'],msg['linear']['y'],msg['linear']['z'])
            #cmd_data_2.angular = Vector3(msg['angular']['x'],msg['angular']['y'],msg['angular']['z'])
            cmd_data_2 = rd('geometry_msgs/Twist', msg)
            cmd_publisher_2.publish(cmd_data_2)
    
    '''
    #joint_states
    '''
    if get_joint_states:
        js_listener_1 = roslibpy.Topic(client_1, '/joint_states', 'sensor_msgs/JointState')
        js_listener_2 = roslibpy.Topic(client_2, '/joint_states', 'sensor_msgs/JointState')

        js_publisher_1 = rospy.Publisher(f"/{bot1_name}/joint_states", JointState, queue_size=10)
        js_publisher_2 = rospy.Publisher(f"/{bot2_name}/joint_states", JointState, queue_size=10)

        def js_callback_1(msg):
            js_data_1 = rd('sensor_msgs/JointState', msg)
            js_publisher_1.publish(js_data_1)

        def js_callback_2(msg):
            js_data_2 = rd('sensor_msgs/JointState', msg)
            js_publisher_2.publish(js_data_2)

    '''
    #map
    '''
    if get_map:
        map_listener_1 = roslibpy.Topic(client_1, '/map', 'nav_msgs/OccupancyGrid')
        map_listener_2 = roslibpy.Topic(client_2, '/map', 'nav_msgs/OccupancyGrid')

        map_publisher_1 = rospy.Publisher(f"/{bot1_name}/map", OccupancyGrid, queue_size=10)
        map_publisher_2 = rospy.Publisher(f"/{bot2_name}/map", OccupancyGrid, queue_size=10)

        def map_callback_1(msg):
            map_data_1 = rd('nav_msgs/OccupancyGrid', msg)
            map_publisher_1.publish(map_data_1)

        def map_callback_2(msg):
            map_data_2 = rd('nav_msgs/OccupancyGrid', msg)
            map_publisher_2.publish(map_data_2)

    '''
    #map_metadata
    '''
    if get_map_metadata:
        map_meta_listener_1 = roslibpy.Topic(client_1, '/map_metadata', 'nav_msgs/MapMetaData')
        map_meta_listener_2 = roslibpy.Topic(client_2, '/map_metadata', 'nav_msgs/MapMetaData')

        map_meta_publisher_1 = rospy.Publisher(f"/{bot1_name}/map_metadata", MapMetaData, queue_size=10)
        map_meta_publisher_2 = rospy.Publisher(f"/{bot2_name}/map_metadata", MapMetaData, queue_size=10)

        def map_meta_callback_1(msg):
            map_meta_data_1 = rd('nav_msgs/MapMetaData', msg)
            map_meta_publisher_1.publish(map_meta_data_1)
            
        def map_meta_callback_2(msg):
            #print(msg)
            map_meta_data_2 = rd('nav_msgs/MapMetaData', msg)
            map_meta_publisher_2.publish(map_meta_data_2)

    '''
    #scan
    '''
    if get_scan:
        scan_listener_1 = roslibpy.Topic(client_1, '/scan', 'sensor_msgs/LaserScan')
        scan_listener_2 = roslibpy.Topic(client_2, '/scan', 'sensor_msgs/LaserScan')

        scan_publisher_1 = rospy.Publisher(f"/{bot1_name}/scan", LaserScan, queue_size=10)
        scan_publisher_2 = rospy.Publisher(f"/{bot2_name}/scan", LaserScan, queue_size=10)

        def scan_callback_1(msg):
            scan_data_1 = rd('sensor_msgs/LaserScan', msg)
            scan_publisher_1.publish(scan_data_1)
            
        def scan_callback_2(msg):
            #print(msg)
            scan_data_2 = rd('sensor_msgs/LaserScan', msg)
            scan_publisher_2.publish(scan_data_2)

    '''
    #odom
    '''
    if get_odom:
        odom_listener_1 = roslibpy.Topic(client_1, '/odom', 'nav_msgs/Odometry')
        odom_listener_2 = roslibpy.Topic(client_2, '/odom', 'nav_msgs/Odometry')

        odom_publisher_1 = rospy.Publisher(f"/{bot1_name}/odom", Odometry, queue_size=10)
        odom_publisher_2 = rospy.Publisher(f"/{bot2_name}/odom", Odometry, queue_size=10)

        def odom_callback_1(msg):
            odom_data_1 = rd('nav_msgs/Odometry', msg)
            odom_publisher_1.publish(odom_data_1)
            
        def odom_callback_2(msg):
            #print(msg)
            odom_data_2 = rd('nav_msgs/Odometry', msg)
            odom_publisher_2.publish(odom_data_2)

    

    '''
    #TF
    '''
    if get_tf:
        tf_listener_1 = roslibpy.Topic(client_1, '/tf', 'tf/tfMessage')
        tf_listener_2 = roslibpy.Topic(client_2, '/tf', 'tf/tfMessage')

        tf_publisher_1 = rospy.Publisher(f"/{bot1_name}/tf", tfMessage, queue_size=10)
        tf_publisher_2 = rospy.Publisher(f"/{bot2_name}/tf", tfMessage, queue_size=10)

        def tf_callback_1(msg):
            
            tf_data_1 = rd('tf/tfMessage', msg)
            tf_publisher_1.publish(tf_data_1)
            
        def tf_callback_2(msg):
            #print(msg)
            tf_data_2 = rd('tf/tfMessage', msg)
            tf_publisher_2.publish(tf_data_2)
    '''
    #TF_Static
    '''
    if get_tf_static:
        tf_static_listener_1 = roslibpy.Topic(client_1, '/tf_static', 'tf2_msgs/TFMessage')
        tf_static_listener_2 = roslibpy.Topic(client_2, '/tf_static', 'tf2_msgs/TFMessage')

        tf_static_publisher_1 = rospy.Publisher(f"/{bot1_name}/tf_static", TFMessage, queue_size=10)
        tf_static_publisher_2 = rospy.Publisher(f"/{bot2_name}/tf_static", TFMessage, queue_size=10)

        def tf_static_callback_1(msg):
            tf_static_data_1 = rd('tf2_msgs/TFMessage', msg)
            tf_static_publisher_1.publish(tf_static_data_1)
            
        def tf_static_callback_2(msg):
            #print(msg)
            tf_static_data_2 = rd('tf2_msgs/TFMessage', msg)
            tf_static_publisher_2.publish(tf_static_data_2)
    '''
    #slam_entropy
    '''

    '''
    #Tempelate
    '''

    #Iteration Loop

    while not rospy.is_shutdown():

        #print(bot2_ip, bot2_name, type(bot2_ip))
        #print(get_imu)
        #print(get_imu,get_cmd_vel,get_joint_states,get_map,get_map_metadata,get_odom,get_slam_entropy)
        if  client_1.is_connected:
            
            if get_imu:
                imu_listener_1.subscribe(imu_callback_1)
                rospy.loginfo_once(f'Publishing topic /{bot1_name}/imu')
                
            if get_cmd_vel:
                cmd_listener_1.subscribe(cmd_callback_1)
                rospy.loginfo_once(f'Publishing topic /{bot1_name}/cmd_vel')
                
            if get_joint_states:
                js_listener_1.subscribe(js_callback_1)
                rospy.loginfo_once(f'Publishing topic /{bot1_name}/joint_states')
                
            if get_map:
                map_listener_1.subscribe(map_callback_1)
                rospy.loginfo_once(f'Publishing topic /{bot1_name}/map')
                
            if get_scan:
                scan_listener_1.subscribe(scan_callback_1)
                rospy.loginfo_once(f'Publishing topic /{bot1_name}/scan')

            if get_odom:
                odom_listener_1.subscribe(odom_callback_1)
                rospy.loginfo_once(f'Publishing topic /{bot1_name}/odom')

            if get_map_metadata:
                map_meta_listener_1.subscribe(map_meta_callback_1)
                rospy.loginfo_once(f'Publishing topic /{bot1_name}/map_metadata')

            if get_tf:
                tf_listener_1.subscribe(tf_callback_1)
                rospy.loginfo_once(f'Publishing topic /{bot1_name}/tf')

            if get_tf_static:
                tf_static_listener_1.subscribe(tf_static_callback_1)
                rospy.loginfo_once(f'Publishing topic /{bot1_name}/tf_static')

        else:
            rospy.logerr_once(f"{bot1_name} connection lost")

        if client_2.is_connected:

            if get_imu:
                imu_listener_2.subscribe(imu_callback_2)
                rospy.loginfo_once(f'Publishing topic /{bot2_name}/imu')
                
            if get_cmd_vel:
                cmd_listener_2.subscribe(cmd_callback_2)
                rospy.loginfo_once(f'Publishing topic /{bot2_name}/cmd_vel')
                
            if get_joint_states:
                js_listener_2.subscribe(js_callback_2)
                rospy.loginfo_once(f'Publishing topic /{bot2_name}/joint_states')
                
            if get_map:
                map_listener_2.subscribe(map_callback_2)
                rospy.loginfo_once(f'Publishing topic /{bot2_name}/map')
                
            if get_scan:
                scan_listener_2.subscribe(scan_callback_2)
                rospy.loginfo_once(f'Publishing topic /{bot2_name}/scan')

            if get_odom:
                odom_listener_2.subscribe(odom_callback_2)
                rospy.loginfo_once(f'Publishing topic /{bot2_name}/odom')
            
            if get_map_metadata:
                map_meta_listener_2.subscribe(map_meta_callback_2)
                rospy.loginfo_once(f'Publishing topic /{bot2_name}/map_metadata')

            if get_tf:
                tf_listener_2.subscribe(tf_callback_2)
                rospy.loginfo_once(f'Publishing topic /{bot2_name}/tf')

            if get_tf_static:
                tf_static_listener_2.subscribe(tf_static_callback_2)
                rospy.loginfo_once(f'Publishing topic /{bot2_name}/tf_static')

        else:
            rospy.logerr_once(f"{bot2_name} connection lost")

        #go to sleep!
        hz.sleep()
        

if __name__ == "__main__":
    try:
        main()
    except rospy.ROSInterruptException:
        pass 


'''
Turtlebot3 topics
/battery_state
/client_count
/cmd_vel
/cmd_vel_rc100
/connected_clients
/diagnostics
/firmware_version
/imu
/joint_states
/magnetic_field
/map
/map_metadata
/motor_power
/odom
/reset
/rosout
/rosout_agg
/rpms
/scan
/sensor_state
/sound
/tf
/tf_static
/turtlebot3_slam_gmapping/entropy
/version_info
'''