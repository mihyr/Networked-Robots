#!/usr/bin/env python
"""

**Info**: This *listener* node connects to remote robot using package roslibpy, converts json message back to ros messsage using rospy_message_converter and publishes messages under local namespace topics
    
**Publishers**:
    Imu, JointState, LaserScan,NavSatFix,NavSatStatus,Odometry, MapMetaData, tfMessage
**Note**: -
"""
from __future__ import print_function
from sys import path, getsizeof
import time
import rospy
import roslibpy
from sensor_msgs.msg import Imu, JointState, LaserScan,NavSatFix,NavSatStatus
from geometry_msgs.msg import TwistStamped, Twist, Vector3
from std_msgs.msg import Float64, Float32,  Header, UInt64
from nav_msgs.msg import OccupancyGrid, Odometry, MapMetaData
from tf.msg import tfMessage
from tf2_msgs.msg import TFMessage
from rospy_message_converter.message_converter import convert_dictionary_to_ros_message as rd

#bots = rospy.get_param('/robots')
get_imu = rospy.get_param('listener/get_imu')
get_cmd_vel = rospy.get_param('listener/get_cmd_vel')
get_joint_states = rospy.get_param('listener/get_joint_states')
get_map = rospy.get_param('listener/get_map')
get_map_metadata = rospy.get_param('listener/get_map_metadata')
get_scan = rospy.get_param('listener/get_scan')
get_odom = rospy.get_param('listener/get_odom')
get_slam_entropy = rospy.get_param('listener/get_slam_entropy')
get_tf = rospy.get_param('listener/get_tf')
get_tf_static = rospy.get_param('listener/get_tf_static')
get_gps = rospy.get_param('listener/get_gps')
get_time = rospy.get_param('listener/get_time')
freq = rospy.get_param("listener/pub_frequency") 

robot_ip = rospy.get_param('listener/ip')
robot_port = rospy.get_param('listener/port')
robot_name = rospy.get_param('listener/robot_name')


#init data_logger
imu_size = 0
cmd_vel_size = 0
joint_states_size = 0
map_size = 0
map_metadata_size = 0
scan_size = 0
odom_size = 0
slam_entropy_size = 0
tf_size = 0
gps_size = 0
tf_static_size = 0
time_size = 0


def main():
    #initialize node
    rospy.init_node('server_listener', anonymous=True)

    #define ros frequency
    hz = rospy.Rate(freq)
    init_time = rospy.get_rostime()
    client_robot = roslibpy.Ros(host=robot_ip, port=robot_port)

    client_robot.run()


    if client_robot.is_connected:
        client_robot.on_ready(lambda: print(f'Connection established with {robot_name} on ip:{robot_ip} port:{robot_port}'))

    else:
        rospy.logerr(f'{robot_name} on ip:{robot_ip} port:{robot_port} is not connected')
    

   
    '''
    #IMU
    '''
    if get_imu:
        imu_listener = roslibpy.Topic(client_robot, '/imu', 'sensor_msgs/Imu')
        imu_publisher = rospy.Publisher(f"/{robot_name}/imu", Imu, queue_size=10)

        def imu_callback(msg):
            imu_data = rd('sensor_msgs/Imu', msg)
            imu_publisher.publish(imu_data)
            global imu_size
            imu_size += getsizeof(msg)
    
    '''
    #cmd_vel
    '''
    if get_cmd_vel:
        cmd_listener = roslibpy.Topic(client_robot, '/cmd_vel', 'geometry_msgs/Twist')
        cmd_publisher = rospy.Publisher(f"/{robot_name}/cmd_vel", Twist, queue_size=10)
        
        def cmd_callback(msg):
            #cmd_data = Twist()
            #cmd_data.linear = Vector3(msg['linear']['x'],msg['linear']['y'],msg['linear']['z'])
            #md_data.angular = Vector3(msg['angular']['x'],msg['angular']['y'],msg['angular']['z'])
            cmd_data = rd('geometry_msgs/Twist', msg)
            cmd_publisher.publish(cmd_data)
            global cmd_vel_size
            cmd_vel_size += getsizeof(msg)


    
    '''
    #joint_states
    '''
    if get_joint_states:
        js_listener = roslibpy.Topic(client_robot, '/joint_states', 'sensor_msgs/JointState')
        js_publisher = rospy.Publisher(f"/{robot_name}/joint_states", JointState, queue_size=10)

        def js_callback(msg):
            js_data = rd('sensor_msgs/JointState', msg)
            js_publisher.publish(js_data)
            global joint_states_size
            joint_states_size += getsizeof(msg)


    '''
    #map
    '''
    if get_map:
        map_listener = roslibpy.Topic(client_robot, '/map', 'nav_msgs/OccupancyGrid')
        map_publisher = rospy.Publisher(f"/{robot_name}/map", OccupancyGrid, queue_size=10)

        def map_callback(msg):
            map_data = rd('nav_msgs/OccupancyGrid', msg)
            map_publisher.publish(map_data)
            global map_size
            map_size += getsizeof(msg)
            #rospy.logerr(map_size)


    '''
    #map_metadata
    '''
    if get_map_metadata:
        map_meta_listener = roslibpy.Topic(client_robot, '/map_metadata', 'nav_msgs/MapMetaData')
        map_meta_publisher = rospy.Publisher(f"/{robot_name}/map_metadata", MapMetaData, queue_size=10)

        def map_meta_callback(msg):
            map_meta_data = rd('nav_msgs/MapMetaData', msg)
            map_meta_publisher.publish(map_meta_data)
            global map_metadata_size
            map_metadata_size += getsizeof(msg)
            
    '''
    #scan
    '''
    if get_scan:
        scan_listener = roslibpy.Topic(client_robot, '/scan', 'sensor_msgs/LaserScan')
        scan_publisher = rospy.Publisher(f"/{robot_name}/scan", LaserScan, queue_size=10)

        def scan_callback(msg):
            scan_data = rd('sensor_msgs/LaserScan', msg)
            scan_publisher.publish(scan_data)
            global scan_size
            scan_size += getsizeof(msg)

    '''
    #odom
    '''
    if get_odom:
        odom_listener = roslibpy.Topic(client_robot, '/odom', 'nav_msgs/Odometry')
        odom_publisher = rospy.Publisher(f"/{robot_name}/odom", Odometry, queue_size=10)

        def odom_callback(msg):
            odom_data = rd('nav_msgs/Odometry', msg)
            odom_publisher.publish(odom_data)
            global odom_size
            odom_size += getsizeof(msg)
            


    
    '''
    #TF
    '''
    if get_tf:
        tf_listener = roslibpy.Topic(client_robot, '/tf', 'tf/tfMessage')
        tf_publisher = rospy.Publisher(f"/{robot_name}/tf", tfMessage, queue_size=10)

        def tf_callback(msg):
            
            tf_data = rd('tf/tfMessage', msg)
            tf_publisher.publish(tf_data)
            global tf_size
            tf_size += getsizeof(msg)

    '''
    #TF_Static
    '''
    if get_tf_static:
        tf_static_listener = roslibpy.Topic(client_robot, '/tf_static', 'tf2_msgs/TFMessage')
        tf_static_publisher = rospy.Publisher(f"/{robot_name}/tf_static", TFMessage, queue_size=10)

        def tf_static_callback(msg):
            tf_static_data = rd('tf2_msgs/TFMessage', msg)
            tf_static_publisher.publish(tf_static_data)
            global tf_static_size
            tf_static_size += getsizeof(msg)
            

    '''
    #Time
    '''
    if get_time:
        time_listener = roslibpy.Topic(client_robot, '/time', 'std_msgs/UInt64')
        time_publisher = rospy.Publisher(f"/{robot_name}/time", UInt64, queue_size=10)
        
        def time_callback(msg):
            time_data = rd('std_msgs/UInt64', msg)
            time_publisher.publish(time_data)

            global time_size
            time_size += getsizeof(msg)

            server_time = time.time_ns()
            agent_time = msg['data']
            latency = (server_time - agent_time)*0.0000010
            rospy.loginfo_throttle(5, f'{robot_name} latency {latency} ms')
            


    '''
    #GPS
    '''
    if get_gps:
        gps_listener = roslibpy.Topic(client_robot, '/gps', 'sensor_msgs/NavSatFix')
        gps_publisher = rospy.Publisher(f"/{robot_name}/gps", NavSatFix, queue_size=10)

        def gps_callback(msg):
            gps_data = rd('sensor_msgs/NavSatFix', msg)
            gps_publisher.publish(gps_data)
            global gps_size
            gps_size += getsizeof(msg)


    '''
    #slam_entropy
    '''

    '''
    #Tempelate
    if get_data:
        data_listener = roslibpy.Topic(client_robot, '/topic', 'msg_type/msg')
        data_publisher = rospy.Publisher(f"/{robot_name}/topic", msg, queue_size=10)

        def data_callback(msg):
            data = rd('msg_type/msg', msg)
            data_publisher.publish(gps_data)
            global data_size
            data_size += getsizeof(msg)
    '''

    #Iteration Loop

    while not rospy.is_shutdown():

        #print(bot2_ip, bot2_name, type(bot2_ip))
        #print(get_imu)
        #print(get_imu,get_cmd_vel,get_joint_states,get_map,get_map_metadata,get_odom,get_slam_entropy)
        current_time = rospy.get_rostime() - init_time
        rospy.loginfo_throttle(5,f'At time: {current_time.secs} secs --------------------------------------------------------------------')

        if  client_robot.is_connected:
            
            
            if get_imu:
                imu_listener.subscribe(imu_callback)
                rospy.loginfo_once(f'Publishing topic /{robot_name}/imu')
                rospy.loginfo_throttle(5,f'IMU Data received: {imu_size* 0.000001} mb from {robot_name}')
                
            if get_cmd_vel:
                cmd_listener.subscribe(cmd_callback)
                rospy.loginfo_once(f'Publishing topic /{robot_name}/cmd_vel')
                rospy.loginfo_throttle(5,f'Cmd_vel Data received: {cmd_vel_size* 0.000001} mb from {robot_name}')
                
            if get_joint_states:
                js_listener.subscribe(js_callback)
                rospy.loginfo_once(f'Publishing topic /{robot_name}/joint_states')
                rospy.loginfo_throttle(5,f'Joint States Data received: {joint_states_size* 0.000001} mb from {robot_name}')
                
            if get_map:
                map_listener.subscribe(map_callback)
                rospy.loginfo_once(f'Publishing topic /{robot_name}/map')
                rospy.loginfo_throttle(5,f'Map Data received: {map_size* 0.000001} mb from {robot_name}')
                
            if get_scan:
                scan_listener.subscribe(scan_callback)
                rospy.loginfo_once(f'Publishing topic /{robot_name}/scan')
                rospy.loginfo_throttle(5,f'Scan Data received: {scan_size* 0.000001} mb from {robot_name}')

            if get_odom:
                odom_listener.subscribe(odom_callback)
                rospy.loginfo_once(f'Publishing topic /{robot_name}/odom')
                rospy.loginfo_throttle(5,f'Odom Data received: {odom_size* 0.000001} mb from {robot_name}')

            if get_map_metadata:
                map_meta_listener.subscribe(map_meta_callback)
                rospy.loginfo_once(f'Publishing topic /{robot_name}/map_metadata')
                rospy.loginfo_throttle(5,f'Map meta Data received: {map_metadata_size* 0.000001} mb from {robot_name}')

            if get_tf:
                tf_listener.subscribe(tf_callback)
                rospy.loginfo_once(f'Publishing topic /{robot_name}/tf')
                rospy.loginfo_throttle(5,f'Tf Data received: {tf_size* 0.000001} mb from {robot_name}')

            if get_tf_static:
                tf_static_listener.subscribe(tf_static_callback)
                rospy.loginfo_once(f'Publishing topic /{robot_name}/tf_static')
                rospy.loginfo_throttle(5,f'Tf static Data received: {tf_static_size* 0.000001} mb from {robot_name}')
            
            if get_gps:
                gps_listener.subscribe(gps_callback)
                rospy.loginfo_once(f'Publishing topic /{robot_name}/gps')
                rospy.loginfo_throttle(5,f'Tf static Data received: {gps_size* 0.000001} mb from {robot_name}')
            
            if get_time:
                time_listener.subscribe(time_callback)
                rospy.loginfo_once(f'Publishing topic /{robot_name}/time')
            '''
            #Tempelate
            if get_data:
                data_listener.subscribe(data_callback)
                rospy.loginfo_once(f'Publishing topic /{robot_name}/topic')
            '''

            total = imu_size + cmd_vel_size + joint_states_size + map_size + map_metadata_size + scan_size + odom_size + slam_entropy_size + tf_size + tf_static_size + time_size + gps_size

            rospy.loginfo_throttle(5,f'Total data received from {robot_name}: {total* 0.000001} mb')


        else:
            rospy.logerr_once(f"{robot_name} connection lost")

      
        #go to sleep!
        hz.sleep()
        

if __name__ == "__main__":
    try:
        main()
    except rospy.ROSInterruptException:
        pass 