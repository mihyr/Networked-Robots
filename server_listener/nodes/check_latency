#!/usr/bin/env python
import logging
import time
import roslibpy
import rospy


robot_ip = rospy.get_param('/agent_ip') 
port = rospy.get_param("/agent_port") 
freq = rospy.get_param("/test_frequency") 


def main():
    #initialize node
    rospy.init_node('latency_test')

    #define ros frequency
    hz = rospy.Rate(freq)

    fmt = '%(asctime)s %(levelname)8s: %(message)s'
    logging.basicConfig(format=fmt, level=logging.INFO)
    log = logging.getLogger(__name__)

    client = roslibpy.Ros(host=str(robot_ip), port=port)

    client.on_ready(lambda: print(f'Is {robot_ip} on port {port} connected?', client.is_connected))

    publisher = roslibpy.Topic(client, f'/{robot_ip}_latency', 'std_msgs/UInt64')
    subscriber = roslibpy.Topic(client, f'/{robot_ip}_latency', 'std_msgs/UInt64')

    def receive_message(msg):
        #nrt = network round trip time
        nrt = int(time.time() * 1000) - msg['data']
        rospy.loginfo(f'ros_msg round trip time: {nrt} ms')

    def publish_message():
        publisher.publish(dict(data=int(time.time() * 1000)))
        #client.call_later(.5, publish_message)


    #logerr msg to check if node is running
    #rospy.logerr("This is just a check for check_latency node, ignore me")

    while not rospy.is_shutdown():
    
        publisher.advertise()
        client.on_ready(publish_message)
        subscriber.subscribe(receive_message)
        
        client.run()

        #go to sleep!
        hz.sleep()

    rospy.logerr('{robot_ip} on  port {port} not connected or connection lost')

if __name__ == "__main__":
    try:
        main()
    except rospy.ROSInterruptException:
        pass 